<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <title>Chat Bot</title>
    <style>
      /* Style for fixed chatbox */
      .fixed-bottom {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 9999;
        transition: transform 0.3s ease-in-out;
        transform: translateY(0%);
      }

      .chatbox-scroll {
        height: calc(100vh - 150px);
        /* Adjust the height as needed */
        overflow-y: auto;
      }

      /* Adjust the padding to keep the chatbox visible */
      .chatbox-padding {
        padding-bottom: 100px;
        /* Adjust as needed */
      }

      /* Max-width for chat response content */
      .chat-content {
        max-width: 100%;
        /* Adjust as needed */
        padding: 20px;
        margin-bottom: 20px;
      }

      /* Ensure content stays within gray box */
      .bg-gray-200 {
        width: 100%;
        box-sizing: border-box;
        padding: 20px;
        margin-bottom: 20px;
      }

      pre {
        font-size: 20px;
        width: 100%;
        padding: 14px;
        white-space: pre-wrap;
        /* Enable word wrapping */
        overflow-wrap: break-word;
        /* Fallback for older browsers */
      }
    </style>
  </head>

  <body class="bg-[#F7F7F8]" style="font-family: Inter">
    <div class="container mx-auto max-w-4xl py-8 px-8">
      <!-- Chat History Container -->
      <div
        class="flex flex-col space-y-4 chatbox-scroll"
        id="chatHistoryContainer"
      >
        <!-- Chat history will be dynamically added here -->
      </div>
    </div>

    <!-- Chat Input Form (fixed at the bottom) -->
    <form
      id="chatForm"
      class="fixed-bottom bg-[#F7F7F8] mx-auto max-w-4xl py-8 flex justify-center gap-6 px-8"
    >
      <input
        type="text"
        id="messageInput"
        name="message"
        placeholder="Enter your message"
        class="px-3 w-full text-sm rounded-md ring-1 ring-neutral-900/20 focus:ring-1 focus:ring-neutral-900/50 focus:outline-none focus:duration-150 caret-neutral-800"
      />
      <button
        type="submit"
        class="text-white inline-flex gap-1 items-center font-medium text-sm px-7 py-2 bg-gradient-to-t from-sky-600 to-sky-600/90 hover:from-sky-600 hover:to-sky-600/70 shadow-[inset_0px_1px_0px_rgb(255,255,255,0.20)] border border-sky-800/80 rounded-md"
      >
        Send
        <span
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="3"
            stroke="currentColor"
            class="w-3 h-2.5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"
            />
          </svg>
        </span>
      </button>
    </form>

    <script>
      // Function to update the chat history
      function updateChatHistory(data) {
        const chatHistoryContainer = document.getElementById(
          "chatHistoryContainer"
        );

        // Create a new chat message element
        const messageElement = document.createElement("div");
        messageElement.classList.add("flex", "items-start");

        if (data.role === "user") {
          messageElement.innerHTML = `<div class="bg-blue-100 p-2 rounded-md"><p class="text-blue-800">${data.content}</p></div>`;
        } else {
          // Check if AI message contains code
          const content = data.containsCode
            ? `<pre>${data.content}</pre>`
            : data.content;
          const contentWrapper = `<div class="bg-gray-200 p-2 rounded-md chat-content chat-border">${content}</div>`; // Wrap content in a div with max-width
          messageElement.innerHTML = contentWrapper;
        }

        // Add the message element to the chat history container
        chatHistoryContainer.appendChild(messageElement);

        // Scroll to bottom of chat history container
        chatHistoryContainer.scrollTop = chatHistoryContainer.scrollHeight;
      }

      // Event listener for form submission
      document
        .getElementById("chatForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault(); // Prevent default form submission

          const message = document.getElementById("messageInput").value.trim();
          if (!message) return; // Do nothing if message is empty

          try {
            // Send message to server
            const response = await fetch("/send-chat", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ message }),
            });

            // If the request was successful, update the chat history
            if (response.ok) {
              const responseData = await response.json();
              updateChatHistory(responseData);
            } else {
              console.error("Error sending message");
            }
          } catch (error) {
            console.error("Error sending message:", error);
          }

          // Clear the input field
          document.getElementById("messageInput").value = "";
        });
    </script>
  </body>
</html>
